Mintlify Docs


# General

Always start a page with this metadata block:
Example:
```mdx
---
title: 'Introduction'
description: 'Example section for showcasing API endpoints'
---
```

# Headers and Text Formatting in Mintlify

## Headers

Mintlify supports different header levels using markdown syntax:

```markdown
## Title (H2)
### Subtitle (H3)
```

Each title and subtitle automatically creates an anchor and appears in the table of contents.

## Text Formatting Options

### Basic Formatting

| Style | Syntax | Result |
| --- | --- | --- |
| Bold | `**text**` | **text** |
| Italic | `_text_` | _text_ |
| Strikethrough | `~text~` | ~~text~~ |

You can combine these formats, e.g., `**_bold and italic_**` becomes **_bold and italic_**

### Superscript and Subscript
Uses HTML tags:
```html
<sup>superscript</sup>
<sub>subscript</sub>
```

## Links
- External links: `[link text](https://example.com)`
- Internal docs links: Use root-relative paths like `/content/text`
- Avoid relative links (`../text`) for better performance

## Blockquotes

### Single-line
```markdown
> Single line quote
```

### Multi-line
```markdown
> First paragraph
>
> Second paragraph
```

## LaTeX Support
- Inline LaTeX: Use single `$` symbols
- Block LaTeX: Use double `$$` symbols

Example:
```markdown
Inline: $(a^2 + b^2 = c^2)$
Block: $$\exists \, x \notin [0,1]$$
```

## Line Breaks
- Use double line breaks in markdown for paragraphs
- Or use HTML `<br />` tag



# Accordion Component Documentation

Accordions are dropdown components used for toggling content in Mintlify documentation. 

## Props

| Prop | Type | Required | Default | Description |
|------|------|----------|---------|-------------|
| `title` | string | Yes | - | Title shown in the Accordion preview |
| `description` | string | No | - | Detail text displayed below the title |
| `defaultOpen` | boolean | No | `false` | Controls if Accordion is open by default |
| `icon` | string/svg | No | - | Font Awesome icon or SVG code |
| `iconType` | string | No | - | Icon type: "regular", "solid", "light", "thin", "sharp-solid", "duotone", or "brands" |

## Usage Notes
- Accordions can contain any type of content
- Can be used individually or within an `AccordionGroup` component for grouping multiple accordions
- Provides an expandable/collapsible interface for organizing content



# Accordion Groups in Mintlify

Accordion Groups are components that allow you to bundle multiple accordions into a single unified display. Here's what you need to know:

## Usage
To create an accordion group, you simply need to wrap your existing `<Accordion>` components within an `<AccordionGroup>` tag:

```jsx
<AccordionGroup>
  <Accordion title="FAQ without Icon">
    {/* Accordion content */}
  </Accordion>
  <Accordion title="FAQ with Icon">
    {/* Accordion content */}
  </Accordion>
</AccordionGroup>
```

## Key Points
- The `<AccordionGroup>` component doesn't accept any props
- You can include other components inside individual Accordions
- For individual accordion properties, you'll need to refer to the Accordion documentation





[Mintlify's Callout Boxes](https://mintlify.com/docs/content/components/callouts) are components used to add eye-catching context to content. There are five different types of callout components:

1. Note Callouts
```jsx
<Note>This adds a note in the content</Note>
```

2. Warning Callouts
```jsx
<Warning>This raises a warning to watch out for</Warning>
```

3. Info Callouts
```jsx
<Info>This draws attention to important information</Info>
```

4. Tip Callouts
```jsx
<Tip>This suggests a helpful tip</Tip>
```

5. Check Callouts
```jsx
<Check>This brings us a checked status</Check>
```

Each callout type serves a different purpose:
- Notes are for general additional content
- Warnings highlight potential issues or important cautions
- Info boxes draw attention to key information
- Tips provide helpful suggestions
- Check callouts indicate a checked or completed status

These components can be used in Mintlify documentation to make content more visually organized and to highlight important information for readers.




# Cards in Mintlify

Cards are UI components used to highlight main points or links with customizable icons. Here are the main types and features:

## Types of Cards

1. **Basic Card** - Standard card with title, content, and optional icon
2. **Horizontal Card** - A more compact version that displays content horizontally
3. **Image Card** - Card that can display an image at the top

## Props Available

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `title` | string | Yes | The title of the card |
| `icon` | string/svg | No | Font Awesome icon or SVG code in `icon={}` |
| `iconType` | string | No | Can be: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands` |
| `color` | string | No | Hex code for icon color |
| `href` | string | No | URL for card navigation |
| `horizontal` | boolean | No | Enables horizontal layout |
| `img` | string | No | URL or local path for image display |

## Example Usage

```mdx
<Card
  title="Card Title"
  icon="icon-name"
  href="/some-link"
>
  This is how you use a card with an icon and a link.
</Card>
```

For horizontal cards:
```mdx
<Card
  title="Horizontal Card"
  horizontal={true}
>
  Here is an example of a horizontal card
</Card>
```

For image cards:
```mdx
<Card
  title="Image Card"
  img="path/to/image.jpg"
>
  Here is an example of a card with an image
</Card>
```



# Card Groups Component

The `CardGroup` component is a layout utility that allows you to display multiple `Card` components side by side in a grid format. Here are the key details:

## Purpose
- Used to group multiple `Card` components together
- Commonly used to arrange cards in the same column
- Creates a grid-based layout for cards

## Properties
- `cols` prop: Controls the number of columns per row
  - Default value: 2

## Example Structure
The documentation shows an example with four cards:
1. First Card: "Neque porro quisquam est qui dolorem ipsum quia dolor sit amet"
2. Second Card: "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
3. Third Card: "Ut enim ad minim veniam, quis nostrud exercitation ullamco"
4. Fourth Card: "Excepteur sint occaecat cupidatat non proident"

[Source: Mintlify Card Groups Documentation](https://mintlify.com/docs/content/components/card-groups)

The component appears to be part of Mintlify's documentation system, alongside other components like Accordions, Code Blocks, Frames, Icons, and more.





# Code Blocks in Mintlify

## Basic Usage
The simplest way to create a code block is by using three backticks:

````md
```
helloWorld();
```
````

## Syntax Highlighting
Add a language identifier after the backticks for syntax highlighting:

````md
```java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
````

## Named Code Blocks
You can add a name/title to your code block by adding text after the language identifier:

````md
```javascript Code Block Example
const hello = "world";
```
````

## Line Highlighting
You can highlight specific lines using curly braces with line numbers or ranges after the language identifier:

````md
```javascript Line Highlighting Example {1,3-5}
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```
````

The documentation mentions that Mintlify uses Prism for syntax highlighting, and there's a reference to Code Groups for displaying multiple code examples in one code box.





Code Groups are components that allow you to combine multiple code blocks into a tabbed interface. Here are the key points:

1. Code Groups require the `<CodeGroup>` component to wrap around individual code blocks
2. Each code block within the group must have a filename, which will be used as the tab label
3. This creates a clean, organized way to show multiple code examples or variations

While the search results don't show the exact syntax example, the typical structure would look something like this:

```mdx
<CodeGroup>
```python:example1.py
print("Hello from Python")
```

```javascript:example2.js
console.log("Hello from JavaScript");
```
</CodeGroup>
```




# Frames Component Documentation

Frames are container components in Mintlify that serve to wrap images or other components. They are particularly useful for:

1. Centering images
2. Adding structure to content
3. Providing additional context through captions

## Usage

The Frame component accepts the following prop:

- `caption` (string, optional): Displays centered text underneath the component

## Example Structure

```jsx
<Frame caption="Yosemite National Park is visited by over 3.5 million people every year">
  {/* Content or image goes here */}
</Frame>
```





# Icons in Mintlify

Icons can be added using Font Awesome icons anywhere in your documentation. Here's how to use them:

## Inline Icons

Icons can be placed inline within paragraphs using the `<Icon>` component.

### Basic Syntax
```markdown
<Icon icon="check" iconType="solid" /> The documentation you want, effortlessly
```

## Component Properties

The `<Icon>` component accepts the following props:

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `icon` | string | Yes | A Font Awesome icon name |
| `iconType` | string | No | One of: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands` |
| `color` | string | No | Hex color code (e.g., `#FF5733`) |
| `size` | number | No | Icon size in pixels |




# Mermaid Diagrams in Mintlify

Mermaid is a tool that allows you to create visual diagrams using text and code. 

## Supported Diagram Types
- Flowcharts
- Sequence diagrams
- Class diagrams
- State diagrams
- Entity relationship diagrams
- User journey diagrams
- And more

## How to Use
To create a Mermaid diagram in Mintlify documentation, use the following syntax:

````markdown
```mermaid
// Your mermaid code block here
```
````

The documentation mentions that for a complete list of supported diagrams, users should refer to the Mermaid website.

## Example
Here's a simple example of a Mermaid flowchart:

```mermaid
graph TD
    A[Start] --> B[Process]
    B --> C[End]
```





# Steps Component Documentation

The Steps component is used to display sequential content or instructions in a numbered format. Here's what you need to know:

## Basic Usage
Steps are used to present a series of actions or events in a sequential order. Example structure:

```jsx
<Steps>
  <Step title="First Step">
    These are instructions or content that only pertain to the first step.
  </Step>
  <Step title="Second Step">
    These are instructions or content that only pertain to the second step.
  </Step>
  <Step title="Third Step">
    These are instructions or content that only pertain to the third step.
  </Step>
</Steps>
```

## Component Props

### Steps Props
- `children`: Required. Array of `Step` components
- `titleSize`: Optional. Controls the size of step titles
  - Values: `"p"` (default), `"h2"`, or `"h3"`

### Individual Step Props
- `children`: Required. The step content (can be text or React components)
- `icon`: Optional. Can be a Font Awesome icon or SVG code
- `iconType`: Optional. Specifies the icon style
  - Options: `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`
- `title`: Optional. The step's title text
- `stepNumber`: Optional. The numerical position of the step
- `titleSize`: Optional. Controls individual step title size
  - Values: `"p"` (default), `"h2"`, or `"h3"`




# Mintlify Tabs Component

Tabs are UI components that allow you to toggle between different content sections. They're commonly used in documentation to organize related information in a space-efficient way.

## Properties

The Tab component has one required property:
- `title` (string): The label shown in the tab header. It's recommended to keep titles concise for better navigation.

## Example Usage

Here's how you can implement tabs in your Mintlify documentation:

```mdx
<Tabs>
  <Tab title="First Tab">
    ☝️ Welcome to the content that you can only see inside the first Tab.
  </Tab>
  <Tab title="Second Tab">
    Content for second tab
  </Tab>
  <Tab title="Third Tab">
    Content for third tab
  </Tab>
</Tabs>
```

When rendered, this creates a tabbed interface where users can switch between different content sections by clicking on the tab headers.




# Tooltips

Show a definition when you hover over text.

## Example
<Tooltip tip="This is a tooltip!">Hover over me</Tooltip>




# Update Component

The Update component is used to keep track of changes and updates in documentation. It creates a changelog-style display with sticky sections for each update.

## Key Features
- Responsive design
- Sticky sections for each changelog entry
- Automatic table of contents generation
- Anchor links for each label

## Usage Example

```md
<Update label="2024-10-12" description="v0.1.1">
  This is how you use a changelog with a label 
  and a description.
</Update>

<Update label="2024-10-11" description="v0.1.0">
  This is how you use a changelog with a label 
  and a description.
</Update>
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| label | string | Yes | Label displayed on the sticky left side of the changelog |
| description | string | No | Description text shown below the label |

You can include any content within the Update component, such as:
- Screenshots
- Code snippets
- Lists of changes
- Feature descriptions

Each `label` automatically creates an anchor link and appears in the table of contents on the right side of the documentation.



# API Components

## Parameter Fields in Mintlify

Parameter Fields (`ParamField` components) are used to define parameters for APIs or SDKs. When you add a ParamField, it automatically creates an API Playground.

### Props Available

Here are all the supported properties for ParamField components:

| Prop | Type | Description |
|------|------|-------------|
| param | string | Query, path, body, or header parameter name |
| type | string | Expected type of the parameter's value |
| required | boolean | Whether the parameter is required |
| deprecated | boolean | Whether the parameter is deprecated |
| default | string | Default value used by the server |
| initialValue | any | Value to initialize the playground |
| placeholder | string | Placeholder text for playground input |
| children | string | Parameter description (supports markdown) |

### Code Examples

Basic usage:
```mdx
<ParamField param="user_id" type="string" required>
  The unique identifier for the user
</ParamField>
```

Example with multiple properties:
```mdx
<ParamField 
  param="api_key" 
  type="string" 
  required={true}
  default="test_key"
  placeholder="Enter your API key"
>
  Your API authentication key
</ParamField>
```

Query parameter example:
```mdx
<ParamField query="filter" type="string" default="all">
  Filter results by specific criteria
</ParamField>
```

Path parameter example:
```mdx
<ParamField path="user_id" type="string" required>
  The ID of the user to retrieve
</ParamField>
```

Body parameter example:
```mdx
<ParamField body="email" type="string" required>
  User's email address
</ParamField>
```

Deprecated parameter example:
```mdx
<ParamField 
  param="old_key" 
  type="string" 
  deprecated={true}
>
  This parameter is deprecated and will be removed in v2.0
</ParamField>
```



## Response Fields Component

The `<ResponseField>` component is specifically designed for:
- Defining API return values
- Listing types in documentation

### Basic Usage

Here's how to use the ResponseField component:

```jsx
<ResponseField name="response" type="string" required>
  A response field example
</ResponseField>
```

### Props

The component accepts the following props:

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| name | string | ✓ | The name of the response value |
| type | string | ✓ | Expected type of the response value |
| default | string | | The default value |
| required | boolean | | Shows "required" beside the field name |

### Example with Multiple Fields

Here's an example showing how you might document multiple response fields:

```jsx
<ResponseField name="user" type="object" required>
  User details object
  <Expandable title="Properties">
    <ResponseField name="id" type="string" required>
      The unique identifier for the user
    </ResponseField>
    <ResponseField name="name" type="string" required>
      The user's full name
    </ResponseField>
    <ResponseField name="email" type="string" default="null">
      The user's email address
    </ResponseField>
  </Expandable>
</ResponseField>
```



# Expandables Component

Expandables are components that allow you to toggle the display of nested properties, which is particularly useful when documenting complex objects or API responses.

## Basic Usage Example

Here's how to implement an expandable component:

```mdx
<Expandable title="user" description="User Object">
  <ResponseField name="full_name" type="string">
    The full name of the user
  </ResponseField>
  <ResponseField name="is_over_21" type="boolean">
    Whether the user is over 21 years old
  </ResponseField>
</Expandable>
```

## Props

The Expandable component accepts the following props:

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `title` | string | required | The name of the object you are showing. Used to generate the "Show NAME" and "Hide NAME" text. |
| `defaultOpen` | boolean | false | Set to true to show the component as open when the page loads. |

## Example with defaultOpen

```mdx
<Expandable title="user" description="User Object" defaultOpen={true}>
  <ResponseField name="full_name" type="string">
    The full name of the user
  </ResponseField>
  <ResponseField name="is_over_21" type="boolean">
    Whether the user is over 21 years old
  </ResponseField>
</Expandable>
```

When rendered, this creates a toggleable section that can show or hide the nested properties, making your documentation cleaner and more organized.




# Sidebar Code Examples

Mintlify provides components that allow you to display code blocks that stick to the top-right of the page on desktop devices. These are particularly useful for API documentation but can be used on any page.

There are two main components:
- `<RequestExample>` - For request code blocks
- `<ResponseExample>` - For response code blocks

## Key Features:
- Sticks to top-right on desktop
- Displays as regular code blocks on mobile
- Can contain multiple code blocks
- Supports code groups within the components

## Usage Examples

### Request Example

```mdx:docs/example.mdx
<RequestExample>
  <CodeGroup>
    <CodeBlock title="JavaScript">
      ```javascript
      fetch('https://api.example.com/data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: 'John Doe'
        })
      })
      ```
    </CodeBlock>
    
    <CodeBlock title="Python">
      ```python
      import requests
      
      response = requests.post(
        'https://api.example.com/data',
        json={'name': 'John Doe'}
      )
      ```
    </CodeBlock>
  </CodeGroup>
</RequestExample>
```

### Response Example

```mdx:docs/example.mdx
<ResponseExample>
  <CodeBlock title="JSON Response">
    ```json
    {
      "id": "123",
      "name": "John Doe",
      "status": "success"
    }
    ```
  </CodeBlock>
</ResponseExample>
```

**Important Notes:**
- Each code block inside `RequestExample` must have a name/title
- `ResponseExample` will appear below `RequestExample` in the sidebar
- Both components render as regular code blocks on mobile devices
