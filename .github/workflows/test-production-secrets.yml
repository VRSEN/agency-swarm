name: Test Production Secrets Configuration

on:
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/test-production-secrets.yml'
      - 'docs/github_secrets_setup.md'

jobs:
  test-secrets:
    name: Test Required Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx requests

      - name: Check Required Secrets Availability
        run: |
          echo "üîç Checking required production secrets..."
          
          # Check OPENAI_API_KEY
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "‚úÖ OPENAI_API_KEY is configured"
            # Validate format (should start with sk-)
            if [[ "${{ secrets.OPENAI_API_KEY }}" == sk-* ]]; then
              echo "‚úÖ OPENAI_API_KEY has valid format"
            else
              echo "‚ùå OPENAI_API_KEY format appears invalid (should start with 'sk-')"
              exit 1
            fi
          else
            echo "‚ùå OPENAI_API_KEY is missing"
            exit 1
          fi
          
          # Check APP_TOKEN
          if [ -n "${{ secrets.APP_TOKEN }}" ]; then
            echo "‚úÖ APP_TOKEN is configured"
            # Check minimum length (should be 32+ characters)
            if [ ${#{{ secrets.APP_TOKEN }} -ge 32 ]; then
              echo "‚úÖ APP_TOKEN has sufficient length"
            else
              echo "‚ö†Ô∏è APP_TOKEN is shorter than recommended (32+ characters)"
            fi
          else
            echo "‚ùå APP_TOKEN is missing"
            exit 1
          fi
          
          # Check Docker credentials
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "‚úÖ DOCKER_USERNAME is configured"
          else
            echo "‚ùå DOCKER_USERNAME is missing"
            exit 1
          fi
          
          if [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "‚úÖ DOCKER_PASSWORD is configured"
          else
            echo "‚ùå DOCKER_PASSWORD is missing"
            exit 1
          fi

      - name: Check Optional Secrets
        run: |
          echo "üîç Checking optional production secrets..."
          
          # SSL Certificates
          if [ -n "${{ secrets.SSL_KEYFILE_CONTENT }}" ]; then
            echo "‚úÖ SSL_KEYFILE_CONTENT is configured"
          else
            echo "‚ÑπÔ∏è SSL_KEYFILE_CONTENT is not configured (optional)"
          fi
          
          if [ -n "${{ secrets.SSL_CERTFILE_CONTENT }}" ]; then
            echo "‚úÖ SSL_CERTFILE_CONTENT is configured"
          else
            echo "‚ÑπÔ∏è SSL_CERTFILE_CONTENT is not configured (optional)"
          fi
          
          # Alert webhook
          if [ -n "${{ secrets.ALERT_WEBHOOK_URL }}" ]; then
            echo "‚úÖ ALERT_WEBHOOK_URL is configured"
          else
            echo "‚ÑπÔ∏è ALERT_WEBHOOK_URL is not configured (optional)"
          fi
          
          # Database URL
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            echo "‚úÖ DATABASE_URL is configured"
          else
            echo "‚ÑπÔ∏è DATABASE_URL is not configured (optional)"
          fi

      - name: Test OpenAI API Connection
        run: |
          echo "üß™ Testing OpenAI API connection..."
          python3 << 'EOF'
          import httpx
          import sys
          import os
          
          api_key = "${{ secrets.OPENAI_API_KEY }}"
          
          try:
              headers = {"Authorization": f"Bearer {api_key}"}
              response = httpx.get("https://api.openai.com/v1/models", headers=headers, timeout=10)
              
              if response.status_code == 200:
                  print("‚úÖ OpenAI API connection successful")
                  models = response.json()
                  print(f"‚úÖ Available models: {len(models.get('data', []))} models found")
              elif response.status_code == 401:
                  print("‚ùå OpenAI API authentication failed - check API key")
                  sys.exit(1)
              else:
                  print(f"‚ö†Ô∏è OpenAI API returned status {response.status_code}")
                  print(f"Response: {response.text}")
                  sys.exit(1)
                  
          except Exception as e:
              print(f"‚ùå OpenAI API connection failed: {e}")
              sys.exit(1)
          EOF

      - name: Test Docker Hub Authentication
        run: |
          echo "üß™ Testing Docker Hub authentication..."
          
          # Test Docker login (without actually logging in to avoid rate limits)
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin 2>&1 | grep -q "Login Succeeded" && {
            echo "‚úÖ Docker Hub authentication successful"
            docker logout
          } || {
            echo "‚ùå Docker Hub authentication failed"
            exit 1
          }

      - name: Test SSL Certificate Format (if provided)
        if: ${{ secrets.SSL_KEYFILE_CONTENT != '' && secrets.SSL_CERTFILE_CONTENT != '' }}
        run: |
          echo "üß™ Testing SSL certificate format..."
          
          # Test SSL key format
          echo "${{ secrets.SSL_KEYFILE_CONTENT }}" | base64 -d > test_key.pem 2>/dev/null && {
            echo "‚úÖ SSL private key is valid base64"
            # Check if it's a valid private key
            openssl rsa -in test_key.pem -check -noout 2>/dev/null && {
              echo "‚úÖ SSL private key format is valid"
            } || {
              echo "‚ö†Ô∏è SSL private key format may be invalid"
            }
            rm -f test_key.pem
          } || {
            echo "‚ùå SSL private key is not valid base64"
            exit 1
          }
          
          # Test SSL certificate format
          echo "${{ secrets.SSL_CERTFILE_CONTENT }}" | base64 -d > test_cert.pem 2>/dev/null && {
            echo "‚úÖ SSL certificate is valid base64"
            # Check if it's a valid certificate
            openssl x509 -in test_cert.pem -text -noout 2>/dev/null && {
              echo "‚úÖ SSL certificate format is valid"
              # Check expiration
              expiry=$(openssl x509 -in test_cert.pem -enddate -noout | cut -d= -f2)
              echo "‚ÑπÔ∏è SSL certificate expires: $expiry"
            } || {
              echo "‚ö†Ô∏è SSL certificate format may be invalid"
            }
            rm -f test_cert.pem
          } || {
            echo "‚ùå SSL certificate is not valid base64"
            exit 1
          }

      - name: Test Alert Webhook (if provided)
        if: ${{ secrets.ALERT_WEBHOOK_URL != '' }}
        run: |
          echo "üß™ Testing alert webhook..."
          
          python3 << 'EOF'
          import httpx
          import json
          import sys
          
          webhook_url = "${{ secrets.ALERT_WEBHOOK_URL }}"
          
          # Test payload for different webhook types
          if "slack.com" in webhook_url:
              payload = {"text": "üß™ GitHub Actions secrets test - Slack webhook working!"}
          elif "discord.com" in webhook_url:
              payload = {"content": "üß™ GitHub Actions secrets test - Discord webhook working!"}
          else:
              payload = {"message": "üß™ GitHub Actions secrets test - Generic webhook working!"}
          
          try:
              response = httpx.post(webhook_url, json=payload, timeout=10)
              if response.status_code in [200, 204]:
                  print("‚úÖ Alert webhook test successful")
              else:
                  print(f"‚ö†Ô∏è Alert webhook returned status {response.status_code}")
                  print(f"Response: {response.text}")
          except Exception as e:
              print(f"‚ùå Alert webhook test failed: {e}")
              # Don't fail the workflow for webhook issues
          EOF

      - name: Generate Security Report
        run: |
          echo "üìä Security Configuration Report"
          echo "================================"
          echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "‚úÖ All required secrets are properly configured"
          echo "‚úÖ OpenAI API connection is working"
          echo "‚úÖ Docker Hub authentication is working"
          echo ""
          echo "üîê Security Recommendations:"
          echo "- Rotate secrets every 90 days"
          echo "- Use different secrets for staging/production"
          echo "- Monitor secret usage in audit logs"
          echo "- Keep backup of APP_TOKEN in secure location"
          echo ""
          echo "üìö Next Steps:"
          echo "1. Deploy to staging environment first"
          echo "2. Test all monitoring endpoints"
          echo "3. Verify error alerting works"
          echo "4. Run load tests with rate limiting"
          echo "5. Deploy to production"

      - name: Success Notification
        run: |
          echo "üéâ All production secrets are properly configured!"
          echo "Your Agency Swarm deployment is ready for production."
