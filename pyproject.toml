[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agency-swarm"
version = "1.0.2"
description = "Agency Swarm framework"
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
authors = [{ name = "Vrsen AI Solutions", email = "me@vrsen.ai" }]
dependencies = [
    "openai>=1.107.1,<2.0",
    "openai-agents==0.2.9",
    "datamodel-code-generator>=0.33.0,<0.34.0",
    "docstring-parser>=0.16,<1.0.0",
    "fastmcp>=2.0.0",
    "jsonref>=1.1.0,<2.0.0",
    "mcp>=1.13.1,<2.0.0",
    "pydantic>=2.11,<3",
    "python-dotenv>=1.1.1,<2.0.0",
    "requests>=2.0,<3",
    "rich>=13.9.4,<14.0.0",
    "prompt-toolkit>=3.0.0,<4.0.0",
    "termcolor>=2.3.0,<3.0.0",
    "types-requests>=2.0,<3",
    "typing-extensions>=4.13,<5",
]
classifiers = [
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
]

[project.urls]
Homepage = "https://github.com/VRSEN/agency-swarm"
Repository = "https://github.com/VRSEN/agency-swarm"

[project.optional-dependencies]
voice = ["numpy>=2.2.0, <3; python_version>='3.10'", "websockets>=15.0, <16"]
viz = ["graphviz>=0.17"]
litellm = ["litellm>=1.67.4.post1, <2"]

fastapi = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "ag-ui-protocol>=0.1.4",
    "aiofiles>=23.2.1",
    "filetype>=1.2.0",
    "httpx>=0.28.0",
]

[tool.uv]
dev-dependencies = [
    "coverage>=7.8.2",
    "mypy>=1.16.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-mock>=3.14.1",
    "ruff>=0.11.12",
]

[tool.hatch.build.targets.wheel]
packages = ["src/agency_swarm"]

[tool.ruff]
line-length = 120
target-version = "py313"
exclude = [
    "docs/**",
]

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "B",
    "C4",
    "UP",
]
isort = { combine-as-imports = true, known-first-party = ["agency_swarm"] }

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"examples/**/*.py" = ["E501"]

[tool.mypy]
# Gradually increase strictness for better type safety
strict = false  # Keep false for now, enable specific checks below
ignore_missing_imports = true
# Enable specific strict checks gradually
disallow_incomplete_defs = true  # Functions must have complete type annotations
disallow_untyped_defs = true     # All functions must have type annotations
disallow_untyped_calls = false   # Keep false for now due to external dependencies
warn_return_any = true           # Warn when returning Any
warn_unused_ignores = true       # Warn about unused type: ignore comments
no_implicit_optional = true     # Strict handling of Optional types

[[tool.mypy.overrides]]
module = "sounddevice.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "ag_ui.*",
    "filetype",
    "jsonref",
    "aiofiles",
    "langchain_community.*",
    "fastmcp.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["tests", "src/agency_swarm"]

[tool.coverage.report]
show_missing = true
sort = "-Cover"
exclude_also = [
    "if TYPE_CHECKING:",
    "@abc.abstractmethod",
    "raise NotImplementedError",
    "logger.debug",
]

[tool.pytest.ini_options]
markers = [
    "asyncio: mark test as asyncio",
    "allow_call_model_methods: mark test as allowing calls to real model implementations",
    "fastapi: mark test as requiring FastAPI dependencies",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
filterwarnings = [
    "ignore:coroutine 'test_async_input_filter_fails.<locals>.invalid_input_filter' was never awaited:RuntimeWarning",
    # Ignore Pydantic v2 deprecation warnings from external dependencies
    "ignore:The `parse_obj` method is deprecated.*:pydantic.warnings.PydanticDeprecatedSince20",
    "ignore:The `dict` method is deprecated.*:pydantic.warnings.PydanticDeprecatedSince20",
    "ignore:The `__fields_set__` attribute is deprecated.*:pydantic.warnings.PydanticDeprecatedSince20",
    # Ignore specific warnings from datamodel-code-generator
    "ignore:.*parse_obj.*:pydantic.warnings.PydanticDeprecatedSince20",
    "ignore:.*\\.dict\\(.*:pydantic.warnings.PydanticDeprecatedSince20",
    "ignore:.*__fields_set__.*:pydantic.warnings.PydanticDeprecatedSince20",
]

testpaths = ["tests"]

[tool.inline-snapshot]
format-command = "ruff format --stdin-filename {filename}"
