# Voice-First Email Draft Approval System - Product Requirements Document

## Overview
**Purpose**: Enable users to send voice messages via Telegram, receive AI-drafted professional emails for approval, and send approved emails through Gmail with intelligent memory of user preferences.

**Target Users**: Professionals who need to quickly compose and send emails while on-the-go, using voice input for convenience and speed.

**Key Value**: Transform casual voice messages into professional emails with human-in-the-loop approval, eliminating the need for typing while maintaining quality control.

## Agency Configuration
- **Name**: voice_email_telegram
- **Pattern**: Orchestrator-Workers (with sequential handoffs)
- **Entry Agent**: CEO (receives voice input from Telegram bot)
- **Framework**: Agency Swarm v1.0.0 with Composio SDK integration

## Agents

### Agent 1: CEO (Entry Point & Orchestrator)
- **Folder Name**: ceo
- **Instance Name**: ceo
- **Agent Name**: "CEO"
- **Description**: Orchestrates the voice-to-email workflow and manages the approval state machine
- **Primary Responsibilities**:
  1. Receive initial voice message trigger from Telegram
  2. Coordinate the draft-approve-send workflow
  3. Manage approval state (pending, approved, rejected, revision)
  4. Route user feedback for revisions
  5. Ensure workflow completes successfully
- **Tools Needed**:
  - Built-in: SendMessage (for agent communication)
  - Custom: ApprovalStateMachine (tracks state: received -> drafted -> pending_approval -> approved/rejected -> sent/revision)
  - Custom: WorkflowCoordinator (manages handoffs between agents)
- **MCP Servers**: None (uses Composio SDK)
- **API Keys Required**: OPENAI_API_KEY

### Agent 2: Voice Handler
- **Folder Name**: voice_handler
- **Instance Name**: voice_handler
- **Agent Name**: "VoiceHandler"
- **Description**: Processes voice input from Telegram and generates voice confirmations via ElevenLabs
- **Primary Responsibilities**:
  1. Monitor Telegram for incoming voice messages
  2. Download and process voice files
  3. Convert speech to text with high accuracy
  4. Generate voice confirmations for key events (draft ready, email sent)
  5. Send voice/text responses back to Telegram
- **Tools Needed**:
  - TELEGRAM_GET_UPDATES (Composio) - Poll for new messages
  - TELEGRAM_DOWNLOAD_FILE (Composio) - Download voice files
  - TELEGRAM_SEND_MESSAGE (Composio) - Send text responses
  - TELEGRAM_SEND_VOICE (Composio) - Send voice confirmations
  - ELEVENLABS_TEXT_TO_SPEECH (Composio) - Generate voice audio
  - ParseVoiceToText (Custom) - Convert audio to text using OpenAI Whisper
  - ExtractEmailIntent (Custom) - Parse voice text to identify recipient, subject, key points
- **Composio Integrations**:
  - telegram toolkit (4 actions)
  - elevenlabs toolkit (1 action)
- **API Keys Required**:
  - COMPOSIO_API_KEY
  - TELEGRAM_BOT_TOKEN (via Composio)
  - ELEVENLABS_API_KEY (via Composio)
  - OPENAI_API_KEY (for Whisper)

### Agent 3: Email Specialist
- **Folder Name**: email_specialist
- **Instance Name**: email_specialist
- **Agent Name**: "EmailSpecialist"
- **Description**: Drafts professional emails from voice input and manages Gmail operations
- **Primary Responsibilities**:
  1. Generate professional email drafts from voice transcription
  2. Incorporate user preferences (tone, style, signatures)
  3. Format drafts for Telegram display with proper formatting
  4. Handle revision requests with specific feedback
  5. Send approved emails via Gmail
  6. Maintain draft history for revisions
- **Tools Needed**:
  - GMAIL_CREATE_DRAFT (Composio) - Create email drafts
  - GMAIL_SEND_EMAIL (Composio) - Send approved emails
  - GMAIL_GET_DRAFT (Composio) - Retrieve draft for revision
  - GMAIL_LIST_DRAFTS (Composio) - List user's drafts
  - DraftEmailFromVoice (Custom) - AI-powered email generation from voice transcript
  - ReviseEmailDraft (Custom) - Modify draft based on user feedback
  - FormatEmailForApproval (Custom) - Format draft for Telegram display with approve/reject buttons
  - ValidateEmailContent (Custom) - Check for missing fields (recipient, subject)
- **Composio Integrations**:
  - gmail toolkit (4 actions)
- **API Keys Required**:
  - COMPOSIO_API_KEY
  - GMAIL_CREDENTIALS (via Composio OAuth)
  - OPENAI_API_KEY (for draft generation)

### Agent 4: Memory Manager
- **Folder Name**: memory_manager
- **Instance Name**: memory_manager
- **Agent Name**: "MemoryManager"
- **Description**: Manages user preferences, supplier information, and contextual memory using Mem0
- **Primary Responsibilities**:
  1. Store user preferences (email tone, common suppliers, addresses)
  2. Retrieve relevant context for email drafting
  3. Learn from user's approval/rejection patterns
  4. Extract preferences from voice messages and interactions
  5. Provide personalized context to Email Specialist
- **Tools Needed**:
  - MEM0_ADD (Composio) - Store new memories/preferences
  - MEM0_SEARCH (Composio) - Search memories by query
  - MEM0_GET_ALL (Composio) - Retrieve all user memories
  - MEM0_UPDATE (Composio) - Update existing memories
  - ExtractPreferences (Custom) - Parse voice/text for preference indicators
  - FormatContextForDrafting (Custom) - Structure memories for email drafting
  - LearnFromFeedback (Custom) - Update preferences based on revisions
- **Composio Integrations**:
  - mem0 toolkit (4 actions)
- **API Keys Required**:
  - COMPOSIO_API_KEY
  - MEM0_API_KEY (via Composio)

## Communication Flows

```python
communication_flows = [
    (ceo, voice_handler),      # CEO -> Voice Handler: Process incoming voice
    (voice_handler, ceo),      # Voice Handler -> CEO: Return transcript + intent
    (ceo, memory_manager),     # CEO -> Memory: Get user context
    (memory_manager, ceo),     # Memory -> CEO: Return preferences
    (ceo, email_specialist),   # CEO -> Email: Draft email with context
    (email_specialist, ceo),   # Email -> CEO: Return draft for approval
    (ceo, voice_handler),      # CEO -> Voice: Send draft to user via Telegram
    # After approval
    (ceo, email_specialist),   # CEO -> Email: Send approved email
    (email_specialist, ceo),   # Email -> CEO: Confirm sent
    (ceo, memory_manager),     # CEO -> Memory: Store successful interaction
    (ceo, voice_handler),      # CEO -> Voice: Send confirmation
    # After rejection
    (ceo, email_specialist),   # CEO -> Email: Revise draft with feedback
    (email_specialist, ceo),   # Email -> CEO: Return revised draft
]
```

**Pattern**: Orchestrator-Workers with sequential handoffs
- All communication routes through CEO
- CEO maintains state and coordinates workflow
- Workers are specialists that respond to CEO requests

## Tool Specifications

### Composio SDK Tools (Primary Integration Method)

| Tool | Agent | Composio Toolkit | Purpose | Input | Output |
|------|-------|------------------|---------|-------|--------|
| TELEGRAM_GET_UPDATES | Voice Handler | telegram | Poll for new messages | bot_token, offset | List of messages |
| TELEGRAM_DOWNLOAD_FILE | Voice Handler | telegram | Download voice files | file_id | File path/bytes |
| TELEGRAM_SEND_MESSAGE | Voice Handler | telegram | Send text to user | chat_id, text | Success status |
| TELEGRAM_SEND_VOICE | Voice Handler | telegram | Send voice message | chat_id, voice_file | Success status |
| ELEVENLABS_TEXT_TO_SPEECH | Voice Handler | elevenlabs | Generate voice audio | text, voice_id | Audio file |
| GMAIL_CREATE_DRAFT | Email Specialist | gmail | Create email draft | to, subject, body | Draft ID |
| GMAIL_SEND_EMAIL | Email Specialist | gmail | Send email | draft_id or to/subject/body | Message ID |
| GMAIL_GET_DRAFT | Email Specialist | gmail | Retrieve draft | draft_id | Draft content |
| GMAIL_LIST_DRAFTS | Email Specialist | gmail | List all drafts | max_results | Draft list |
| MEM0_ADD | Memory Manager | mem0 | Store memory | user_id, text, metadata | Memory ID |
| MEM0_SEARCH | Memory Manager | mem0 | Search memories | query, user_id | Matching memories |
| MEM0_GET_ALL | Memory Manager | mem0 | Get all memories | user_id | All memories |
| MEM0_UPDATE | Memory Manager | mem0 | Update memory | memory_id, text | Success status |

### Custom Tools (Built on Agency Swarm BaseTool)

| Tool | Agent | Type | Inputs | Output | Purpose |
|------|-------|------|--------|--------|---------|
| ApprovalStateMachine | CEO | BaseTool | state: str, action: str | new_state: str | Manages workflow state transitions |
| WorkflowCoordinator | CEO | BaseTool | stage: str, data: dict | next_agent: str | Determines next step in workflow |
| ParseVoiceToText | Voice Handler | BaseTool | audio_file: bytes | transcript: str | Converts voice to text using Whisper |
| ExtractEmailIntent | Voice Handler | BaseTool | transcript: str | intent: dict | Extracts recipient, subject, key points |
| DraftEmailFromVoice | Email Specialist | BaseTool | intent: dict, context: dict | draft: dict | Generates professional email |
| ReviseEmailDraft | Email Specialist | BaseTool | draft_id: str, feedback: str | revised_draft: dict | Modifies draft based on feedback |
| FormatEmailForApproval | Email Specialist | BaseTool | draft: dict | telegram_message: str | Formats draft with inline buttons |
| ValidateEmailContent | Email Specialist | BaseTool | draft: dict | validation: dict | Checks for required fields |
| ExtractPreferences | Memory Manager | BaseTool | text: str, interaction_type: str | preferences: dict | Identifies user preferences |
| FormatContextForDrafting | Memory Manager | BaseTool | memories: list | context: dict | Structures memories for email draft |
| LearnFromFeedback | Memory Manager | BaseTool | draft: dict, feedback: str | updated_prefs: dict | Updates preferences from revisions |

## Detailed Workflow Examples

### Example 1: Successful Email Draft and Approval

**User Input**: [Voice message] "Hey, send an email to John at Acme Corp about the shipment delay. Tell him the order will arrive next Tuesday instead of Monday."

**Flow**:
1. **CEO receives** Telegram webhook notification
2. **CEO → Voice Handler**: "Process incoming voice message from chat_id 12345"
3. **Voice Handler**:
   - Downloads voice file via TELEGRAM_DOWNLOAD_FILE
   - Converts to text via ParseVoiceToText: "Hey, send an email to John at Acme Corp about the shipment delay. Tell him the order will arrive next Tuesday instead of Monday."
   - Extracts intent via ExtractEmailIntent: {recipient: "john@acmecorp.com", subject: "Shipment Delay Update", key_points: ["order delayed", "arrives Tuesday not Monday"]}
   - Returns to CEO
4. **CEO → Memory Manager**: "Get context for user 12345"
5. **Memory Manager**:
   - Searches memories via MEM0_SEARCH: "Acme Corp, John, shipment"
   - Retrieves: {john_email: "john@acmecorp.com", preferred_tone: "professional but friendly", signature: "Best regards, [User]"}
   - Formats via FormatContextForDrafting
   - Returns to CEO
6. **CEO → Email Specialist**: "Draft email with intent + context"
7. **Email Specialist**:
   - Generates draft via DraftEmailFromVoice using GPT-4:
     ```
     To: john@acmecorp.com
     Subject: Shipment Delay Update

     Hi John,

     I wanted to reach out regarding your recent order. Unfortunately, we've experienced a slight delay in shipping. The order will now arrive on Tuesday instead of Monday as originally scheduled.

     We apologize for any inconvenience this may cause and appreciate your understanding.

     Best regards,
     [User]
     ```
   - Validates via ValidateEmailContent: ✓ All fields present
   - Saves draft via GMAIL_CREATE_DRAFT: draft_id = "draft_xyz"
   - Formats for Telegram via FormatEmailForApproval
   - Returns to CEO
8. **CEO → Voice Handler**: "Send draft to user for approval"
9. **Voice Handler**:
   - Sends message via TELEGRAM_SEND_MESSAGE with inline keyboard:
     ```
     Here's your email draft:

     To: john@acmecorp.com
     Subject: Shipment Delay Update

     [Draft content]

     [Approve ✓] [Reject ✗]
     ```
10. **User clicks**: [Approve ✓]
11. **CEO receives**: Approval callback
12. **CEO → Email Specialist**: "Send approved draft_xyz"
13. **Email Specialist**:
    - Sends via GMAIL_SEND_EMAIL: message_id = "msg_abc"
    - Returns confirmation to CEO
14. **CEO → Memory Manager**: "Store successful interaction"
15. **Memory Manager**:
    - Stores via MEM0_ADD: "Successfully sent shipment delay email to John at Acme Corp, professional tone worked well"
16. **CEO → Voice Handler**: "Send success confirmation"
17. **Voice Handler**:
    - Generates voice via ELEVENLABS_TEXT_TO_SPEECH: "Your email has been sent to John successfully!"
    - Sends via TELEGRAM_SEND_VOICE
    - Also sends text confirmation via TELEGRAM_SEND_MESSAGE

**Total Time**: ~15-20 seconds

### Example 2: Draft Rejection and Revision

**User Input**: [Voice message] "Write to my supplier Sarah about reordering those blue widgets"

**Flow**:
1-9. [Same as Example 1, draft generated and sent to Telegram]
10. **User clicks**: [Reject ✗] and sends voice: "Too formal, make it more casual and mention we need 500 units"
11. **CEO receives**: Rejection + feedback
12. **CEO → Voice Handler**: "Process feedback voice message"
13. **Voice Handler**:
    - Converts feedback to text: "Too formal, make it more casual and mention we need 500 units"
    - Returns to CEO
14. **CEO → Email Specialist**: "Revise draft_xyz with feedback"
15. **Email Specialist**:
    - Retrieves original via GMAIL_GET_DRAFT
    - Revises via ReviseEmailDraft:
      ```
      To: sarah@supplier.com
      Subject: Reordering Blue Widgets

      Hey Sarah,

      Hope you're doing well! We'd like to reorder the blue widgets - we'll need 500 units this time.

      Let me know when you can get those shipped out.

      Thanks!
      [User]
      ```
    - Updates draft via GMAIL_CREATE_DRAFT (new draft_id)
    - Formats for Telegram
    - Returns to CEO
16. **CEO → Voice Handler**: "Send revised draft to user"
17. **Voice Handler**: Sends new draft with approval buttons
18. **User clicks**: [Approve ✓]
19. **CEO → Email Specialist**: "Send approved draft"
20. **Email Specialist**: Sends email, returns confirmation
21. **CEO → Memory Manager**: "Store preference update"
22. **Memory Manager**:
    - Updates via LearnFromFeedback: "User prefers casual tone with Sarah at supplier, include specific quantities"
    - Stores via MEM0_UPDATE
23. **CEO → Voice Handler**: "Send confirmation"
24. **Voice Handler**: Sends voice + text confirmation

**Total Time**: ~30-40 seconds (with revision)

### Example 3: Missing Information Handling

**User Input**: [Voice message] "Send an email about the meeting tomorrow"

**Flow**:
1-7. [Draft generation attempted]
8. **Email Specialist**:
   - Draft generated but ValidateEmailContent fails: Missing recipient
   - Returns error to CEO: {status: "incomplete", missing: ["recipient"]}
9. **CEO → Voice Handler**: "Request missing information"
10. **Voice Handler**:
    - Sends via TELEGRAM_SEND_MESSAGE: "I need more information. Who should I send this email to?"
    - Sends via TELEGRAM_SEND_VOICE: [Voice version of same question]
11. **User responds**: [Voice] "Send it to the team at team@company.com"
12. **CEO → Voice Handler**: "Process clarification"
13. **Voice Handler**: Extracts recipient: "team@company.com"
14. **CEO → Email Specialist**: "Draft with complete information"
15. [Continue with normal approval flow]

### Example 4: Learning User Preferences

**Scenario**: User consistently signs emails to client "ABC Inc" with "Warm regards" instead of default "Best regards"

**Handling**:
1. After 3rd approval of similar emails, Memory Manager detects pattern
2. Memory Manager stores via MEM0_ADD: {
   "preference_type": "signature",
   "context": "emails to ABC Inc",
   "value": "Warm regards",
   "confidence": 0.8
}
3. On next email to ABC Inc:
   - Memory Manager retrieves this preference
   - Email Specialist uses "Warm regards" automatically
   - User approves without revision
   - Memory Manager increases confidence to 0.9

## System Architecture

### State Machine (CEO)

```
States:
- IDLE: Waiting for input
- VOICE_PROCESSING: Voice being transcribed
- CONTEXT_RETRIEVAL: Fetching user preferences
- DRAFTING: Email being generated
- PENDING_APPROVAL: Waiting for user response
- REVISING: Draft being modified
- SENDING: Email being sent
- COMPLETED: Workflow finished
- ERROR: Handling error

Transitions:
IDLE -> VOICE_PROCESSING (on voice message received)
VOICE_PROCESSING -> CONTEXT_RETRIEVAL (on transcript ready)
CONTEXT_RETRIEVAL -> DRAFTING (on context retrieved)
DRAFTING -> PENDING_APPROVAL (on draft ready)
PENDING_APPROVAL -> SENDING (on approval)
PENDING_APPROVAL -> REVISING (on rejection)
REVISING -> PENDING_APPROVAL (on revised draft ready)
SENDING -> COMPLETED (on email sent)
ANY -> ERROR (on error)
ERROR -> IDLE (after error handled)
COMPLETED -> IDLE (after confirmation sent)
```

### Data Flow

```
User Voice Message (Telegram)
    ↓
Voice Handler (Whisper API)
    ↓
Text Transcript + Intent
    ↓
Memory Manager (Mem0)
    ↓
User Preferences + Context
    ↓
Email Specialist (GPT-4)
    ↓
Draft Email
    ↓
Voice Handler (Telegram)
    ↓
User Sees Draft (Approve/Reject)
    ↓
[If Approve]
Email Specialist (Gmail)
    ↓
Email Sent
    ↓
Voice Handler (ElevenLabs + Telegram)
    ↓
User Confirmation

[If Reject]
Voice Handler (Get Feedback)
    ↓
Email Specialist (Revise)
    ↓
[Back to Draft Display]
```

## Dependencies

### Required API Keys
1. **OPENAI_API_KEY** (Required)
   - Purpose: Agent intelligence, Whisper for voice-to-text, GPT-4 for email drafting
   - Source: https://platform.openai.com/api-keys

2. **COMPOSIO_API_KEY** (Required)
   - Purpose: Unified access to all integrations
   - Source: https://app.composio.dev/api-keys

3. **TELEGRAM_BOT_TOKEN** (Required via Composio)
   - Purpose: Telegram bot communication
   - Setup: Create bot via @BotFather, add to Composio

4. **GMAIL_CREDENTIALS** (Required via Composio OAuth)
   - Purpose: Send emails via Gmail API
   - Setup: OAuth flow through Composio dashboard

5. **ELEVENLABS_API_KEY** (Required via Composio)
   - Purpose: Voice synthesis for confirmations
   - Source: https://elevenlabs.io/api

6. **MEM0_API_KEY** (Required via Composio)
   - Purpose: User preference storage and retrieval
   - Source: https://mem0.ai/api-keys

### Python Packages

```requirements.txt
agency-swarm>=1.0.0
composio-core>=0.5.0
composio-openai>=0.5.0
python-dotenv>=1.0.0
openai>=1.0.0
pydantic>=2.0.0
python-telegram-bot>=20.0
```

### Environment Setup

```.env
# Core
OPENAI_API_KEY=sk-...
COMPOSIO_API_KEY=...

# Integrations (configured via Composio)
TELEGRAM_BOT_TOKEN=...
ELEVENLABS_API_KEY=...
MEM0_API_KEY=...

# Optional
AGENCY_DEBUG=true
LOG_LEVEL=INFO
```

## Testing Strategy

### Unit Tests

**Voice Handler Tests**:
- Test voice file download and processing
- Test Whisper transcription accuracy
- Test intent extraction from various voice samples
- Test ElevenLabs voice generation
- Test Telegram message sending

**Email Specialist Tests**:
- Test email draft generation quality
- Test draft revision with feedback
- Test Gmail API integration (create, send, get)
- Test email validation (missing fields)
- Test formatting for Telegram display

**Memory Manager Tests**:
- Test preference extraction from text
- Test memory storage and retrieval
- Test context formatting
- Test learning from feedback patterns
- Test Mem0 integration

**CEO Tests**:
- Test state machine transitions
- Test workflow coordination
- Test error handling and recovery
- Test agent communication routing

### Integration Tests

**End-to-End Workflow Tests**:
1. **Happy Path Test**:
   - Send voice message → Receive draft → Approve → Email sent → Confirmation received
   - Expected time: <20 seconds
   - Success criteria: Email delivered to recipient

2. **Revision Flow Test**:
   - Send voice → Receive draft → Reject with feedback → Receive revised draft → Approve → Email sent
   - Expected time: <40 seconds
   - Success criteria: Revised draft incorporates feedback

3. **Missing Info Test**:
   - Send incomplete voice → Receive request for clarification → Provide info → Receive draft
   - Success criteria: System requests exactly the missing information

4. **Preference Learning Test**:
   - Send 3 similar emails with same corrections → Send 4th email → Draft uses learned preferences
   - Success criteria: 4th draft doesn't need same corrections

5. **Error Recovery Test**:
   - Simulate Gmail API failure → System retries → User notified if permanent failure
   - Success criteria: Graceful error messages, system doesn't crash

### Performance Tests

**Latency Targets**:
- Voice transcription: <3 seconds
- Draft generation: <5 seconds
- Email sending: <2 seconds
- Total workflow: <15 seconds (without revisions)

**Load Tests**:
- Test with 10 concurrent users
- Test with 100 emails per hour per user
- Test Mem0 query performance with 1000+ memories

**Quality Tests**:
- Email draft quality (human review of 100 samples)
- Voice transcription accuracy (>95% WER)
- Preference extraction accuracy (>90%)

## Deployment Plan

### Phase 1: Development Environment Setup (Day 1)
1. Set up Agency Swarm v1.0.0 project
2. Install Composio SDK and authenticate
3. Configure all API integrations via Composio dashboard
4. Set up Telegram bot and webhook
5. Create development environment with test accounts

### Phase 2: Agent Implementation (Days 2-4)

**Day 2: CEO + Voice Handler**
- Implement CEO orchestration logic and state machine
- Implement Voice Handler with Telegram + ElevenLabs integration
- Test voice input/output cycle

**Day 3: Email Specialist**
- Implement email drafting logic with GPT-4
- Integrate Gmail API via Composio
- Test draft generation and sending

**Day 4: Memory Manager**
- Implement Mem0 integration
- Build preference extraction and learning logic
- Test context retrieval and formatting

### Phase 3: Integration & Testing (Days 5-6)

**Day 5: End-to-End Integration**
- Connect all agents via communication flows
- Implement approval workflow with Telegram buttons
- Test complete happy path

**Day 6: Edge Cases & Polish**
- Implement error handling
- Test revision flow
- Test missing information handling
- Add logging and monitoring

### Phase 4: User Testing (Days 7-8)

**Day 7: Alpha Testing**
- Deploy to staging environment
- Test with 3-5 internal users
- Collect feedback on draft quality and UX

**Day 8: Refinement**
- Improve prompts based on feedback
- Fix bugs discovered in testing
- Optimize response times

### Phase 5: Production Deployment (Day 9-10)

**Day 9: Production Setup**
- Set up production environment with separate API keys
- Configure monitoring and alerting
- Deploy to production server
- Set up backup and recovery

**Day 10: Launch & Monitor**
- Enable for initial users
- Monitor performance and errors
- Provide user documentation

### Rollout Strategy
1. **Week 1**: Internal team (5 users)
2. **Week 2**: Beta group (20 users)
3. **Week 3**: Public launch (open access)

### Monitoring & Maintenance

**Key Metrics to Track**:
- Message processing time (avg, p95, p99)
- Draft approval rate (how often users approve first draft)
- Revision rate (how often users request changes)
- Email delivery success rate
- API error rates (by integration)
- User satisfaction (collect via periodic surveys)

**Alerting**:
- Alert if any API is down
- Alert if message processing time >30 seconds
- Alert if error rate >5%
- Alert if email delivery rate <95%

**Logging**:
- Log all voice messages (with user permission)
- Log all drafts and revisions
- Log all API calls with latency
- Log state transitions in CEO

## Success Metrics

### Technical Metrics
- [ ] All agents respond within latency targets (<3s voice, <5s draft, <2s send)
- [ ] Communication flows work bidirectionally
- [ ] State machine handles all transitions correctly
- [ ] Error messages are clear and actionable
- [ ] Composio integrations work reliably (>99% uptime)
- [ ] Memory retrieval is fast (<1 second)

### User Experience Metrics
- [ ] First draft approval rate >70%
- [ ] Average revisions per email <1.5
- [ ] User satisfaction score >4.5/5
- [ ] Voice transcription accuracy >95%
- [ ] Email delivery success rate >99%
- [ ] Average end-to-end time <20 seconds

### Business Metrics
- [ ] Daily active users growing
- [ ] Average emails per user >5/day
- [ ] User retention rate >80% after 30 days
- [ ] Time saved per email vs traditional typing: >60%

## Risk Assessment & Mitigation

### Technical Risks

**Risk 1: Voice Transcription Errors**
- Impact: Poor email draft quality
- Probability: Medium
- Mitigation:
  - Use OpenAI Whisper for high accuracy
  - Show transcript to user for verification before drafting
  - Allow user to edit transcript

**Risk 2: Gmail API Rate Limits**
- Impact: Failed email sending
- Probability: Low
- Mitigation:
  - Implement exponential backoff
  - Cache drafts locally
  - Queue emails if rate limit hit

**Risk 3: Telegram Bot Downtime**
- Impact: Users can't send messages
- Probability: Low
- Mitigation:
  - Implement webhook retry logic
  - Store failed messages for processing when service recovers
  - Provide status page

**Risk 4: Poor Draft Quality**
- Impact: High revision rate, user frustration
- Probability: Medium
- Mitigation:
  - Extensive prompt engineering
  - Use GPT-4 (not 3.5) for quality
  - Learn from user revisions via Memory Manager
  - A/B test different prompting strategies

### Security Risks

**Risk 5: API Key Exposure**
- Impact: Unauthorized access
- Probability: Low
- Mitigation:
  - Use Composio SDK for secure key management
  - Never log API keys
  - Rotate keys regularly
  - Use environment variables only

**Risk 6: Unauthorized Email Sending**
- Impact: Spam, reputation damage
- Probability: Low
- Mitigation:
  - Require approval for every email (no auto-send)
  - Implement rate limiting per user
  - Log all sent emails
  - Provide user activity dashboard

## Future Enhancements (Out of Scope for v1)

### Phase 2 Features
- Multi-language support (voice + email)
- Email templates for common scenarios
- Scheduled email sending
- Email thread management (replies, forwards)
- Attachment support
- Calendar integration for meeting-related emails

### Phase 3 Features
- Web dashboard for email history
- Analytics on email patterns
- AI-suggested recipients based on context
- Voice commands for bulk actions
- Integration with other email providers (Outlook, etc.)
- Mobile app (native)

### Phase 4 Features
- Team accounts with shared preferences
- Email campaign support
- CRM integration
- Advanced preference controls (per-recipient tone, etc.)
- Multi-modal input (voice + text + images)

## Parallel Creation Notes

This PRD is designed for parallel execution by three specialized agents:

### For agent-creator:
- Create 4 agent modules: CEO, Voice Handler, Email Specialist, Memory Manager
- Use agent specifications above for each module structure
- Implement state machine in CEO
- Set up communication flows as specified
- Estimated time: 3-4 hours

### For tools-creator:
- Implement Composio SDK integration (13 tools via Composio)
- Create 11 custom tools as specified in tool tables
- All tools should use BaseTool from Agency Swarm
- Prioritize custom tools that other agents depend on (ApprovalStateMachine, DraftEmailFromVoice)
- Estimated time: 4-5 hours

### For instructions-writer:
- Write detailed instructions for each agent based on responsibilities
- Include workflow examples in instructions
- Specify error handling for each agent
- Add context about Composio SDK usage
- Estimated time: 2-3 hours

**Synchronization Points**:
1. After agent structure is created, tools can be added to agent folders
2. After tools are created, instructions can reference specific tool names
3. Final integration after all three components are complete

**Dependencies**:
- agent-creator must finish CEO structure before instructions-writer specifies workflows
- tools-creator should prioritize CEO tools (ApprovalStateMachine, WorkflowCoordinator) first
- All agents need Composio SDK setup before any testing

## Agent Count Justification

**Total Tools Required**: 22 tools (13 Composio + 9 custom)

**Why 4 Agents?**
1. **CEO** (2 tools): Minimal orchestration-only agent, no domain logic
2. **Voice Handler** (7 tools): Voice processing + Telegram + ElevenLabs are tightly coupled
3. **Email Specialist** (8 tools): Email drafting + Gmail operations + formatting are core to domain
4. **Memory Manager** (6 tools): Preference management is distinct concern, could grow significantly

**Could NOT reduce to 3 agents because**:
- Combining Email + Memory would create 14-tool agent (acceptable but leaves no room for growth)
- Memory management is distinct enough to warrant separation
- Future enhancements will add tools to Memory (templates, analytics)

**Could NOT reduce to 2 agents because**:
- Would require 20-tool worker agent (exceeds 16-tool guideline)
- Violates single responsibility principle
- Makes parallel development difficult

**Distribution**: 2 + 7 + 8 + 6 = 23 tools (including built-in SendMessage)
- All agents within 4-16 tool range ✓
- Room for growth in each agent ✓
- Clear separation of concerns ✓

---

## Approval Checklist

Before proceeding to build phase, confirm:

- [ ] Agent structure is clear and minimal (4 agents)
- [ ] All tools are specified with inputs/outputs
- [ ] Communication flows are documented
- [ ] Workflow examples cover common cases
- [ ] All API keys and credentials are listed
- [ ] Testing strategy is comprehensive
- [ ] Deployment plan is realistic (10 days)
- [ ] Risk mitigation is adequate
- [ ] Success metrics are measurable
- [ ] PRD is detailed enough for parallel agent creation

**Estimated Build Time**: 10 days (with 1 developer)
**Estimated Build Time (Parallel)**: 5-6 days (with agent-creator, tools-creator, instructions-writer working simultaneously)

---

*PRD Version: 1.0*
*Created: 2025-10-28*
*Framework: Agency Swarm v1.0.0*
*Integration: Composio SDK*
