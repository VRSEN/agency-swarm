[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "erni-foto"
version = "1.0.0"
description = "AI-Powered Photo Processing System with SharePoint Integration"
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
authors = [{ name = "Erni-Foto Team", email = "team@erni-foto.com" }]
dependencies = [
    "agency-swarm>=1.0.1",
    "openai>=1.107.1,<2.0",
    "requests>=2.31.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "Pillow>=10.0.0,<11.0.0",
    "exifread>=3.0.0,<4.0.0",
    "msal>=1.24.0,<2.0.0",
    "azure-identity>=1.15.0,<2.0.0",
    "msgraph-core>=1.0.0,<2.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "rich>=13.0.0,<14.0.0",
    "click>=8.1.0,<9.0.0",
    "tqdm>=4.66.0,<5.0.0",

    "imagehash>=4.3.1,<5.0.0",
    "python-magic>=0.4.27,<1.0.0",
    "aiofiles>=23.2.1,<24.0.0",
    "asyncio-throttle>=1.0.2,<2.0.0",
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Office/Business :: Office Suites",
]

[project.urls]
Homepage = "https://github.com/erni-foto/erni-foto"
Repository = "https://github.com/erni-foto/erni-foto"
Documentation = "https://erni-foto.readthedocs.io"
Issues = "https://github.com/erni-foto/erni-foto/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.0",
    "codecov>=2.1.0",
]

testing = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "responses>=0.23.0",
    "factory-boy>=3.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.scripts]
erni-foto = "erni_foto.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/erni_foto"]

[tool.ruff]
line-length = 120
target-version = "py312"
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.isort]
known-first-party = ["erni_foto"]
combine-as-imports = true

[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "exifread.*",
    "imagehash.*",
    "magic.*",
    "msal.*",
    "msgraph.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "sharepoint: Tests requiring SharePoint access",
    "openai: Tests requiring OpenAI API access",
]

[tool.coverage.run]
source = ["src/erni_foto"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
